apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse-wtp'

ext {
    javaVersion 		= '1.8'
	servletVersion 		= '3.1'
	tomcatVersion 		= '8.0.20'
    javaEncoding 		= 'UTF-8'
	gradleVersion		= '2.12'
	springVersion 		= '4.1.4.RELEASE'
	ezframeworkVersion	= '1.0.+'
	targetServer = project.hasProperty('target') ? project.getProperty('target') : 'local'
}

sourceCompatibility = javaVersion
targetCompatibility = javaVersion
webAppDirName = 'webapp'

version = '1.0.0-SNAPSHOT'
war {
    archiveName = "${baseName}.${extension}"
    manifest {
        attributes 	'Implementation-Title': archivesBaseName,
        			'Implementation-Version': version,
        			'Build-SVN-Version': getRevision(),
        			'System-JDK': "${System.getProperty('java.version')} (${System.getProperty('java.specification.vendor')})",
        			'Build-JDK-Version': javaVersion,
        			'Gradle-Version': GradleVersion.current().getVersion(),
        			'Created-By': 'ddakker@gmail.com',
        			'Create-Date': new Date().format('yyyy-MM-dd HH:mm:ss').toString()
    }
}


repositories {
	mavenCentral()
	maven {
		url mvnRepositorieUrl
		credentials {
			username mvnRepositorieUsername
			password mvnRepositoriePassword
		}
	}
}

dependencies {

	compile "org.ezdevgroup:ezframework-web:$ezframeworkVersion"
	compile "org.ezdevgroup:ezframework-support:$ezframeworkVersion"
	compile "org.ezdevgroup:ezframework-tag:$ezframeworkVersion"
	compile "org.ezdevgroup:ezframework-security:$ezframeworkVersion"
	compile "org.ezdevgroup:ezframework-ehcache:$ezframeworkVersion"
	compile "org.ezdevgroup:ezframework-ispn:$ezframeworkVersion"
	compile "org.ezdevgroup:ezframework-rabbitmq:$ezframeworkVersion"

	/*
	compile project(':ezframework-web')
	compile project(':ezframework-support')
	compile project(':ezframework-tag')
	compile project(':ezframework-security')
	compile project(':ezframework-ehcache')
	compile project(':ezframework-ispn')
	compile project(':ezframework-rabbitmq')
	*/
	compile 'com.h2database:h2:+'
	compile 'org.hsqldb:hsqldb:2.3.3'


	compile 'org.mybatis:mybatis:3.4.0'
	compile 'org.mybatis:mybatis-spring:1.3.0'
	compile 'ognl:ognl:3.1.3'


	compile 'commons-dbcp:commons-dbcp:1.4'
	compile "commons-lang:commons-lang:2.6"
	compile "org.apache.commons:commons-lang3:3.3.2"

	if( "$targetServer" == "real" ){
		compile 'org.mariadb.jdbc:mariadb-java-client:1.1.9'
	}else{
		compile 'mysql:mysql-connector-java:5.1.34'
	}
	compile 'org.lazyluke:log4jdbc-remix:0.2.7'

	compile 'javamail:javamail:1.4.7'

	//compile 'com.opennaru.khan:khan-session-infinispan:1.3.0'
	//compile 'com.opennaru.khan:khan-session-redis:1.3.0'

    compile 'org.projectlombok:lombok:+'

    compile 'opensymphony:sitemesh:2.4.2'
	compile 'jstl:jstl:1.2'

	providedCompile "javax.servlet:javax.servlet-api:$servletVersion.0"
	providedCompile "javax.servlet.jsp:javax.servlet.jsp-api:2.2.1"

	//compile 'com.opennaru.khan:khan-session-hotrod:1.3.0'
	compile 'org.springframework.amqp:spring-rabbit:1.4.4.RELEASE'

	testCompile "junit:junit:4.11"
	testCompile "org.hamcrest:hamcrest-all:1.3"
	testCompile "org.springframework:spring-test:$springVersion"
}

configurations {
	// logback 사용[commons-logging 의존성 제거]
	all*.exclude group: 'commons-logging', module: 'commons-logging'
	all*.exclude group: 'org.hamcrest', module: 'hamcrest-core'
	all*.exclude group: 'log4j', module: 'log4j'
	all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
	all*.exclude group: 'org.slf4j', module: 'slf4j-simple'
}

// 인코딩
[compileJava, compileTestJava]*.options*.encoding = javaEncoding

configurations.all {
	// check for updates every build
	resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

eclipse {
	wtp {
		component {
			contextPath = '/'
		}
		facet {
			facet name: 'jst.web', version: servletVersion
			facet name: 'jst.java', version: javaVersion
		}
	}
}

sourceSets {
	if( "$targetServer" != "local" ){
		copy {
			from("src/main/resources/properties-$targetServer"){
				exclude 'logback.xml'
			}
			into "src/main/resources/properties"
		}
		copy {
			from("src/main/resources/properties-$targetServer"){
				include 'logback.xml'
			}
			into("src/main/resources/")
		}
		delete file("src/main/resources/properties-dev")
		delete file("src/main/resources/properties-stage")
		delete file('src/main/resources/properties-real')
	}
}

// src/main/java에 위치한 non java 파일을 output 디렉토리로 복사
processResources {
	from('src/main/java') {
		include '**/*.xml'
	}
	into 'build/classes'
	includeEmptyDirs = true
}

// src/main/java에 위치한 non java 파일을 output 디렉토리로 복사
processTestResources {
	from('src/test/java') {
		include '**/*.xml'
	}

	into 'build/classes'

	includeEmptyDirs = true
}



def getRevision() {
	try {
		if ( "$targetServer" != "local" ){
			def stdout = new ByteArrayOutputStream()
			exec {
				executable = "svn"
				args = ["info"]
				standardOutput = stdout
			}

			if (stdout.toString().trim().indexOf('E155036') > -1) {	// 버전 문제 시
				exec {
					executable = "svn"
					args = ["upgrade"]
					standardOutput = stdout
				}

				exec {
					executable = "svn"
					args = ["info"]
					standardOutput = stdout
				}
			}


			def output = stdout.toString().trim()
			def matchLastChangedRev = output =~ /마지막 수정 리비전: (\d+)/
			if (matchLastChangedRev.count != 1) {
				matchLastChangedRev = output =~ /Last Changed Rev: (\d+)/
			}
			def revision = matchLastChangedRev[0][1]

			return revision as int
		} else {
			return 0;
		}
	} catch(e) {
		return -1;
	}
}

configurations.all {
	resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

task wrapper(type: Wrapper) {
	description = 'Generates gradlew[.bat] scripts'
	gradleVersion = gradleVersion
}